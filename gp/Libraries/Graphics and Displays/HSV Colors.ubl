module 'HSV Colors' Operators
author MicroBlocks
version 1 1
depends Fractions
description 'Deprecated! Will be removed. Please use the Color library instead.

HSV to RGB color conversions.
'

  spec 'r' 'HSV_hsv_to_color' 'color of hue _ saturation _ brightness _ (0-100)' 'num num num' 0 100 50
  spec 'r' 'HSV_hsv_rgb' 'RGB of hue _ saturation _ brightness _ (0-100)' 'num num num' 0 100 50
  space
  spec 'r' 'HSV_rgb_to_color' 'color of r _ g _ b _ (0-255)' 'num num num' 128 0 0
  spec 'r' 'HSV_rgb_to_hsv' 'HSV of r _ g _ b _' 'num num num' 128 0 0
  space
  spec 'r' 'HSV_color_to_hsv' 'HSV of color _' 'color'
  spec 'r' 'HSV_color_to_rgb' 'RBG of color _' 'color'

to HSV_color_to_hsv color {
  return (HSV_rgb_to_hsv ((color >> 16) & 255) ((color >> 8) & 255) (color & 255))
}

to HSV_color_to_rgb color {
  return ('[data:makeList]' ((color >> 16) & 255) ((color >> 8) & 255) (color & 255))
}

to HSV_hsv_rgb h s v {
  comment 'return a list representing the corresponding RGB values for the given HSV color
ranges hsv from 0 to 100, rgb from 0 to 255'
  h = (FRACT h 360)
  s = (FRACT s 100)
  v = (FRACT v 100)
  local 'i' (FRACT_integer (FRACT_multiply h 6))
  local 'fract' (FRACT_subtract (FRACT_multiply h 6) i)
  local 'p' (FRACT_multiply v (FRACT_subtract 1 s))
  local 'q' (FRACT_multiply v (FRACT_subtract 1 (FRACT_multiply fract s)))
  local 't' (FRACT_multiply v (FRACT_subtract 1 (FRACT_multiply (FRACT_subtract 1 fract) s)))
  local 'case' (i % 6)
  local 'r' 0
  local 'g' 0
  local 'b' 0
  if (case == 0) {
    r = v
    g = t
    b = p
  } (case == 1) {
    r = q
    g = v
    b = p
  } (case == 2) {
    r = p
    g = v
    b = t
  } (case == 3) {
    r = p
    g = q
    b = v
  } (case == 4) {
    r = t
    g = p
    b = v
  } (case == 5) {
    r = v
    g = p
    b = q
  }
  return ('[data:makeList]' (FRACT_integer (FRACT_multiply r 255)) (FRACT_integer (FRACT_multiply g 255)) (FRACT_integer (FRACT_multiply b 255)))
}

to HSV_hsv_to_color h s v {
  local 'rgb' (HSV_hsv_rgb h s v)
  return (((at 1 rgb) << 16) | (((at 2 rgb) << 8) | (at 3 rgb)))
}

to HSV_rgb_to_color r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return (((r << 16) | (g << 8)) | b)
}

to HSV_rgb_to_hsv r g b {
  local 'r_' (FRACT r 255)
  local 'g_' (FRACT g 255)
  local 'b_' (FRACT b 255)
  local 'max' (maximum r g b)
  local 'min' (minimum r g b)
  local 'hsv' ('[data:makeList]' 0 0 (FRACT_integer (FRACT_multiply 100 (FRACT max 255))))
  if (min != max) {
    local 'delta' (FRACT (max - min) 255)
    atPut 2 hsv (FRACT_integer (FRACT_multiply 100 (FRACT delta (FRACT max 255))))
    local 'h' (FRACT 1 delta)
    if (max == r) {
      h = (FRACT_multiply h (FRACT_subtract g_ b_))
    }
    if (max == g) {
      h = (FRACT_add (FRACT_multiply h (FRACT_subtract b_ r_)) 2)
    }
    if (max == b) {
      h = (FRACT_add (FRACT_multiply h (FRACT_subtract r_ g_)) 4)
    }
    h = (FRACT_integer (FRACT_multiply 60 h))
    if (h < 0) {
      h += 360
    }
    atPut 1 hsv h
  }
  return hsv
}

